install.packages("ggplot2")
?help
1+1
x<-1
print(x)
x
#print
x+1
print(x)
x
clear
clear()
hemp cls
help cls
help("clear")
help("cls")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
x<-c(x,2,3,4:9)
c()
help(c)
c(1,7:9)
c(1:5, 10.5, "next")
c(1:5, 10.5, "next")[3]
x[-2]
dim(x)<-c(3,3)
x
x<-c(x,2,3,4:9)
x<-c(1,2,3,4:9)
dim(x)<-c(3,3)
dim(x)<-c(3,7)
dim(x)<-c(3,4)
x<-c(1,2,3,4:18)
dim(x)<-c(3,3,2)
x
foo <- function(x){}
foo <- function(x){ +}
foo <- function(x){
x +1
}
foo(2)
foo(4:9)
class(diamonds)
dim(diamonds)
names(diamonds)
head(diamonds)
range(diamonds$cut)
example<-read.table("http://www.plants.usda.gov/java/downloadData?fileName=plantlst.txt&static=true",header=TRUE, sep=",")
summary(example)
View(foo)
library(gdata)
library(XLConnect)
titanic <- read.csv("~/Downloads/titanic.csv")
View(titanic)
View(example)
install.packages("gdata")
library(gdata)
View(example)
View(titanic)
clear
titanic_subset <- sample(1:nrow(titanic), 100)
summary(buslane)
author: "Shakti Patro"
date: "January 21, 2016"
buslane <- read.csv("~/Downloads/buslane.csv", nrows=100)
names(titanic)
library(ggplot2)
diamonds
qqnorm(diamonds)
qqnorm(diamonds$price)
qqnorm(diamonds$carat)
qqnorm(diamonds$price)
qqnorm(log(diamonds$price)
)
qqnorm(log(diamonds$price))
qqnorm(diamonds$price)
set.seed(123)
index<-sample(1:nrow(diamonds), 50)
diamonds2 <- diamonds[index]
diamonds2 <- diamonds[index,]
diamonds2
qqnorm(diamonds$price)
qqnorm(diamonds2$price)
qqnorm(log(diamonds2$price))
qqnorm(diamonds2$price)
library(ggplot2)
index <- sample(1:nrow(diamonds), 50)
index
sample(1:2)
sample(1:4)
sample(1:100)
sample(1:100, 10)
sample(1:100, 10)
ncol(diamonds)
nrowdiamonds)
nrow(diamonds)
y <- rt(200, df = 5)
qqnorm(y);
y
sq(2.5)
sqrt(2.5*2.5/25)
pnorm(66,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(3,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(4,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(45,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(69,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(2,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(2)
1- pnorm(2)
pnorm(66,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(2,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(2)
1- pnorm(2)
qnorm(95,mean=65, sd=2.5, lower.tail=FALSE)
qnorm(95,mean=65, sd=2.5)
qnorm(0.95,mean=65, sd=2.5)
qnorm(0.95,mean=65, sd=2.5, lower.tail=FALSE)
help("Normal")
pnorm(2,mean=65, sd=2.5)
1- pnorm(2)
pnorm(66,mean=65, sd=2.5, lower.tail=FALSE)
zscore <- (66-65)/(0.5)
pnorm(zscore,mean=65, sd=2.5, lower.tail=FALSE)
zscore <- (66-65)/(0.5)
pnorm(zscore,mean=65, sd=2.5, lower.tail=FALSE)
zscore
pnorm(2,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(2,mean=65, sd=2.5)
1 - pnorm(2,mean=65, sd=2.5)
pnorm(2,lower.tail=FALSE)
pnorm(-4)
pnorm(4)
1 - pnorm(4)
pnorm(-4)
pnorm(67,mean=65, sd=2.5, lower.tail=FALSE)
pnorm(2,lower.tail=FALSE)
pop_sd <- 2.5
pop_mean <- 65
#z-score calculation
z <- (72 - pop_mean)/pop_sd
p_yellow1 <- pnorm(72, pop_mean, pop_sd)    #using x, mu, and sigma
p_yellow2 <- pnorm(z)                       #using z-score of 2.107
p_blue1 <- 1 - p_yellow1
p_blue2 <- 1 - p_yellow2
p_blue1
p_blue2
cls
66-65
66-65/2.5
pnorm(40)
66-65/0.5
1/2.5
pnorm(0.4)
pnorm(2)
zscore <- (63-65)/(0.5)
pnorm(zscore)
pnorm(66, 65, 2.5)
pnorm(66, 65 , 2.5)
zscore1 <- (63.5-65)/(0.5)
zscore2 <- (66.5-65)/(0.5)
pnorm(zscore2) - pnorm(zscore1)
leftInterval <- qnorm(-0.025, 65, 0.5)
rightInterval <- qnorm(0.025, 65, 0.5)
show(leftInterval)
show(rightInterval)
qnorm(-0.025, 65, 0.5)
qnorm(0.025, 65, 0.5)
leftInterval <- qnorm(0.025, 65, 0.5)
rightInterval <- qnorm(0.975, 65, 0.5)
show(leftInterval)
show(rightInterval)
leftInterval <- qnorm(0.025, 65, 0.25)
rightInterval <- qnorm(0.975, 65, 0.25)
show(leftInterval)
show(rightInterval)
qqnorm(diamonds$price)
qqline(x)
library(ggplot2)
qqnorm(diamonds$price)
qqline(x)
qqnorm(diamonds$price)
qqline(xdiamonds$price)
qqnorm(diamonds$price)
qqline(diamonds$price)
rnorm(10, 0, 0.01)
c <- rnorm(10, 0, 0.01)
mean(c)
sd(c)
v <- vector()
v
v.append(a,2,3)
v <- append(v, c(1,2,3,4))
v
v <- append(v, c(1.3,2,3,4))
v
length(v)
x <- t.test(c(1:10))
x
x.p-value
x[p-value]
x["p-value"]
x."p-value"
x[[p.value]]
names(x)
x[["p.value"]]
ts = replicate(1000,t.test(rnorm(10),rnorm(10))$p.value)
ts
RNORM(10)
rnorm(10)
rnorm(10)
rnorm(10,10)
rnorm(10,10)
rnorm(10,mean = 0.5, sd=2)
rnorm(10,mean = 0.5, sd=2)
demo("colors")
for(n in c(10,30, 300)) {
rnorm(n)
}
x <- for(n in c(10,30, 300)) {rnorm(n)}
x
x <- for(n in c(10,30, 300)) {return rnorm(n)}
for(n in c(10,30, 300)) {print(rnorm(n))}
?colors
colors[1]
?replicate
c(0, 0.5, 1, 2,3)
for(n in c(10, 30, 300)){}
for(n in c(10, 30, 300)){print(n)}
sample1 <- rnorm(n, mean=muDiff, sd=sdev)
sample2 <- rnorm(n, mean=muDiff, sd=sdev)
sample1 <- rnorm(n, mean=0, sd=0.01)
sample2 <- rnorm(n, mean=0, sd=0.01)
sample1
sample2
n
```
means <- c(0, 0.5, 1, 2,3)
sdevs <- c(0.01, 0.25, 0.5, 1, 2)
for(n in c(10, 30, 300)) {
par(mfrow=c(5,5), mar=c(3,1,1,1))
for (mu in means) {
for (sdev in sdevs) {
ttest <- t.test(rnorm(n, mean=mu, sd=sdev), rnorm(n, mean=mu, sd=sdev))
pvalues <- replicate(500, ttest$p.value)
#print(length(pvalues))
i#f(n = 10) boxplot(pvalues)
hist(log(pvalues),col="tomato", main=paste("n:", n, " mu:", mu, " sd:", sdev))
/
seq(0.0001,1, by=0.01)
n
mu
hist(rnorm(n, mean=mu, sd=sdev), xlim=seq(0.0001,1, by=0.01))
hist(rnorm(100), xlim=seq(0.0001,1, by=0.01))
hist(rnorm(100), xlim=c(0.0001,1, by=0.01))
hist(rnorm(100), xlim=c(0.0001,1, by=0.01))
c(0.0001,1, by=0.01)
hist(pnorm(100), xlim=seq(0.0001,1, by=0.01))
hist(pnorm(100), xlim=0.0001:1:0.01)
hist(pnorm(100), breaks=seq(0.0001,1, by=0.01))
hist(pnorm(10,0,0.24), breaks=seq(0.0001,1, by=0.01))
hist(rnorm(10,0,0.24), breaks=seq(0.0001,1, by=0.01))
hist(rnorm(10,0,0.24))
hist(rnorm(10,0,0.24), breaks=seq(0.0001,1, by=0.01))
hist(rnorm(10,0,0.24), breaks=seq(-0.6,1, by=0.1))
hist(rnorm(10,0,0.24), breaks=seq(-0.2,1, by=0.1))
log(10)
log(10, 10)
log(10, e)
log(10, 2)
log(10, E)
log(10, exp(1))
hist(rnorm(10,0,0.24), breaks=seq(0.0001,1, by=0.01))
range(seq(0.0001,1, by=0.01))
p
p = replicate(500, t.test(rnorm(10, mean=0.05, sd=1), rnorm(10, mean=0.05, sd=1))$p.value)
p
ggplot(as.data.frame(pvalues), aes(factor(variable), value)) + geom_boxplot()
library(ggplot2)
ggplot(as.data.frame(pvalues), aes(factor(variable), value)) + geom_boxplot()
ggplot(as.data.frame(p), aes(factor(variable), value)) + geom_boxplot()
ggplot(as.data.frame(p), aes(factor(variable), value)) + geom_boxplot()
as.data.frame(p)
ggplot(as.data.frame(p), aes(factor(p), value)) + geom_boxplot()
ggplot(as.data.frame(p), aes(factor(p), 0:1)) + geom_boxplot()
ggplot(as.data.frame(p), aes(factor(p))) + geom_boxplot()
x=list()
x.add(a)
x[a]
x
ToothGrowth
p
unlist(p)
d <- data.frame(x = unlist(p),
grp = rep(letters[1:length(p)],times = sapply(p,length)))
d
pdataframe <- data.frame(row.names = c("pvalue","grp"))
pdataframe
df$pvalue = rbind(df$pvalue, p)
df <- data.frame(row.names = c("pvalue","grp"))
df$pvalue = rbind(df$pvalue, p)
df$pvalue = rbind(df$pvalue, p)
df$pvalue = rbind(df$pvalue, p[])
df$pvalue = rbind(df$pvalue, p)
df$pvalue
df
print(df)
df <- data.frame(pvalue=NA,grp=NA))
df <- data.frame(pvalue=NA,grp=NA)
df
df <- data.frame(pvalue=NA,grp=NA)[numeric(0),]
df
df
df$pvalue = rbind(df$pvalue, p)
df$pvalue = rbind(df$pvalue, 1)
df = rbind(df, c(p,NA))
df
df <- data.frame(pvalue=NA,grp=NA)[numeric(0),]
df
df = rbind(df, c(p[0],NA))
df
df
df <- data.frame(pvalue=NA,grp=NA)[numeric(0),]
df <- data.frame(pvalue=NA,grp=NA)
df
df = rbind(df, c(p[0],NA))
df
df$pvalue = rbind(df$pvalue, 1)
df
df$pvalue <- rbind(df$pvalue, 1)
df$pvalue = rbind(df$pvalue, 1)
df$pvalue = rbind(df$pvalue, 1)
df$pvalue = rbind(df$pvalue, 1, 1)
df$pvalue = rbind(df$pvalue, 1, 1, 3)
df$pvalue = rbind(df$pvalue)
df
df$pvalue = rbind(p)
df$pvalue = rbind(p[0])
df
df$pvalue = rbind(p[0])
a <- as.list(c(1:4, NA))
melt(a)
require(reshape2)a <- as.list(c(1:4, NA))
melt(a)
require(reshape2)
a <- as.list(c(1:4, NA))
melt(a)
require(reshape2)
a <- as.list(c(1:4))
melt(a)
a <- as.list(p)
a
melt(a)
melt(a, level=2)
melt(a, level=1)
melt(a, L2="me")
melt(a, L1="me")
melt(a, variable.names("a"))
melt(a, variable.names("a", "b"))
melt(a, variable.names("pvalue"), value.name="type" , measure.vars=c("a","b"))
melt(a, variable.name("pvalue"), value.name="type" , measure.vars=c("a","b"))
interaction(df$1, df$2)
interaction(df)
interaction(df[[1]])
interaction(df[[1]], df[[2]])
interaction(df[[1]], df[[2]])
df <- data.frame(f1=factor(rbinom(100, 1, 0.45), label=c("m","w")),
f2=factor(rbinom(100, 1, 0.45), label=c("young","old")),
boxthis=rnorm(100))
df
df$f1f2 <- interaction(df$1, df$2)
df
df$f1f2 <- interaction(df$f1, df$f2)
df
ggplot(aes(y = boxthis, x = f1f2), data = df) + geom_boxplot()
df <- data.frame(f1=factor(rbinom(100, 1, 0.45), label=c("m","w")),
f2=factor(rbinom(100, 1, 0.45), label=c("young","old")),
boxthis=rnorm(100))
df
ggplot(aes(y = boxthis, x = f1), data = df) + geom_boxplot()
install.packages("rJava")
library(rJava)
.jinit()
.jinit()
library(rJava)
.jinit()
install.packages("rJava")
install.packages("rJava")
clear
library(rJava)
.jinit()
javareconf
install.packages("rJava",type='source')
install.packages("rJava", type = "source")
remove.packages("rJava")
install.packages("rJava", type = "source")
library(rJava)
install.packages("rJava")
setwd("~/Documents/CS6240/AirlineRegressionWithMR")
N<-1
all_data <- read.table("output/hadoop-output", sep="\t",  col.names=c("airline", "year", "time", "price"), strip.white=TRUE)
data_year_ar <- split(all_data, list(all_data$year, all_data$airline))
dataList <- NULL
for(dy in data_year_ar){
# Retrieve each value
time<-dy$time
price<-dy$price
airline<-unique(unlist(dy$airline))
year<-unique(unlist(dy$year))
# Calculate linear regression
timelr<-lm(price~time)
# Predictionsx
time_fit<-predict(timelr, data.frame(time=(c(N))), interval="predict")
time_diff<-as.data.frame(time_fit)
time_predict<-sum(time_diff$fit)
dataList <- rbind(dataList, c(year, as.character(airline), time_predict))
#print(as.character(airline))
}
colnames(dataList) = c("year", "airline", "fit")
df <- data.frame(dataList)
yr_split <- split(df, list(df$year))
min_list = NULL;
for(yr in yr_split){
fit<-yr$fit
airline<-yr$airline
year<-unique(unlist(yr$year))
c<- yr[which.min(yr[,3]),2]
min_car<-as.data.frame(c)
min_list <- rbind(min_list, c(as.character(c)))
}
print(min_list)
c<- count(min_list)
#print(data.frame(dataList, col.names=FALSE))
write.table(as.character(c[1,1]), file = "R.txt" , row.names=FALSE, col.names=FALSE)
df
dataList
all_data
N<-1
all_data <- read.table("output/hadoop-output", sep="\t",  col.names=c("airline", "year", "time", "price"), strip.white=TRUE)
data_year_ar <- split(all_data, list(all_data$year, all_data$airline))
dataList <- NULL
for(dy in data_year_ar){
# Retrieve each value
time<-dy$time
price<-dy$price
airline<-unique(unlist(dy$airline))
year<-unique(unlist(dy$year))
# Calculate linear regression
timelr<-lm(price~time)
# Predictionsx
time_fit<-predict(timelr, data.frame(time=(c(N))), interval="predict")
time_diff<-as.data.frame(time_fit)
time_predict<-sum(time_diff$fit)
dataList <- rbind(dataList, c(year, as.character(airline), time_predict))
#print(as.character(airline))
}
colnames(dataList) = c("year", "airline", "fit")
df <- data.frame(dataList)
yr_split <- split(df, list(df$year))
min_list = NULL;
for(yr in yr_split){
fit<-yr$fit
airline<-yr$airline
year<-unique(unlist(yr$year))
c<- yr[which.min(yr[,3]),2]
min_car<-as.data.frame(c)
min_list <- rbind(min_list, c(as.character(c)))
}
print(min_list)
c<- count(min_list)
#print(data.frame(dataList, col.names=FALSE))
write.table(as.character(c[1,1]), file = "R.txt" , row.names=FALSE, col.names=FALSE)
